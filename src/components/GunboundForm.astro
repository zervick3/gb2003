---

---

<div class="container">
    <h2 class="float">GunBound 2004 - Triko Calculador</h2>
    <input
        type="number"
        id="numeroInput"
        placeholder="Ingresa una posición (1-40)"
        min="1"
        max="40"
    />
    <select class="Direction" id="direccionSelect">
        <option value="RIGHT">Derecha</option>
        <option value="LEFT">Izquierda</option>
    </select>
    <div class="table-container" id="tablaContainer"></div>
</div>

<script>
    const numeroInput = document.getElementById(
        "numeroInput",
    ) as HTMLInputElement;
    const direccionSelect = document.getElementById(
        "direccionSelect",
    ) as HTMLSelectElement;
    const container = document.getElementById("tablaContainer");

    interface TrikoData {
        values: {
            op1: number[];
            op2: number[];
            op3: number[];
        };
        SPIN: {
            "1SPIN"?: number[];
            "2SPIN"?: number[];
            "3SPIN"?: number[];
        };
    }

    interface Triko {
        triko: {
            RIGHT: {
                "1SD": TrikoData;
                "2SD": TrikoData;
            };
            LEFT: {
                "1SD": TrikoData;
                "2SD": TrikoData;
            };
        };
    }

    const triko: Triko = {
        triko: {
            RIGHT: {
                "1SD": {
                    values: {
                        op1: [
                            87, 84, 80, 75, 71, 65, 60, 54, 49, 47, 39, 35, 31,
                            28, 25, 23, 20, 19, 17, 16,
                        ],
                        op2: [
                            89, 88, 86, 85, 84, 82, 81, 79, 78, 77, 75, 74, 72,
                            71, 69, 68, 66, 64, 63, 61,
                        ],
                        op3: [
                            89, 0, 88, 87, 86, 86, 85, 84, 83, 83, 82, 0, 81,
                            80, 79, 79, 78, 77, 77, 76,
                        ],
                    },
                    SPIN: {
                        "1SPIN": [
                            1.8, 1.75, 1.69, 1.65, 1.6, 1.6, 1.6, 1.68, 1.7,
                            1.8, 1.9, 2.0, 2.2, 2.38, 2.56, 2.75, 2.95, 3.16,
                            3.37, 3.58,
                        ],
                        "2SPIN": [
                            2.78, 2.77, 2.76, 2.75, 2.74, 2.73, 2.72, 2.72,
                            2.71, 2.7, 2.7, 2.72, 2.72, 2.73, 2.74, 2.75, 2.77,
                            2.76, 2.8, 2.8,
                        ],
                        "3SPIN": [
                            3.73, 3.73, 3.73, 3.8, 3.74, 3.74, 3.85, 3.82, 3.75,
                            3.74, 0, 3.75, 3.75, 3.8, 3.76, 3.76, 3.75, 3.8,
                        ],
                    },
                },
                "2SD": {
                    values: {
                        op1: [
                            60, 59, 57, 56, 54, 53, 51, 50, 49, 48, 46, 45, 44,
                            42, 41, 40, 39, 38, 37, 37,
                        ],
                        op2: [35, 34, 33, 32],
                        op3: [
                            75, 74, 74, 73, 72, 71, 70, 70, 69, 69, 68, 67, 66,
                            65, 64, 64, 63, 62, 61, 60,
                        ],
                    },
                    SPIN: {
                        "1SPIN": [
                            2.85, 2.88, 2.9, 2.94, 2.9, 3.0, 3.0, 3.1, 3.1, 3.2,
                            3.2, 3.27, 3.33, 3.38, 3.44, 3.5, 3.56, 3.6, 3.6,
                            3.7,
                        ],
                        "2SPIN": [3.8, 3.9, 3.98, 4.0],
                        "3SPIN": [
                            3.78, 3.76, 3.8, 3.79, 3.8, 3.8, 3.75, 3.81, 3.9,
                            3.85, 3.8, 3.86, 3.86, 3.87, 3.88, 3.91, 3.9, 3.9,
                            3.94, 3.95,
                        ],
                    },
                },
            },
            LEFT: {
                "1SD": {
                    values: {
                        op1: [
                            88, 86, 84, 82, 80, 78, 76, 73, 71, 69, 66, 64, 62,
                            59, 57, 55, 52, 50, 47, 45,
                        ],
                        op2: [
                            89, 88, 87, 86, 85, 84, 83, 82, 82, 81, 80, 79, 78,
                            77, 76, 75, 74, 73, 72, 71,
                        ],
                        op3: [
                            0, 0, 0, 0, 87, 0, 86, 0, 85, 0, 84, 0, 83, 0, 82,
                            81, 0, 80, 0, 79,
                        ],
                    },
                    SPIN: {
                        "2SPIN": [
                            2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.2, 2.26,
                            2.28, 2.3, 2.24, 2.38, 2.4, 2.47, 2.5, 2.5,
                        ],
                        "3SPIN": [
                            3.26, 3.26, 3.26, 3.25, 3.2, 3.2, 3.2, 3.2, 3.28,
                            3.25, 3.2, 3.26, 3.26, 3.27, 3.27, 3.28, 3.3, 3.3,
                        ],
                    },
                },
                "2SD": {
                    values: {
                        op1: [43, 40, 38, 36, 34, 32, 30, 29, 28, 27, 25, 23],
                        op2: [
                            70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 59, 58, 57,
                            56, 55, 54, 53, 52, 51, 49,
                        ],
                        op3: [48, 47, 46, 45, 44, 43, 42, 41],
                    },
                    SPIN: {
                        "1SPIN": [
                            2.66, 2.7, 2.8, 2.9, 3.0, 3.1, 3.1, 3.1, 3.2, 3.4,
                            3.6, 3.8,
                        ],
                        "2SPIN": [
                            3.3, 3.3, 3.3, 3.34, 3.36, 3.37, 3.39, 3.4, 3.4,
                            3.4, 3.46, 3.48, 3.5, 3.53, 3.56, 3.59, 3.62, 3.65,
                            3.68,
                        ],
                        "3SPIN": [3.7, 3.76, 3.8, 3.84, 3.88, 3.93, 3.98, 3.4],
                    },
                },
            },
        },
    };

    function getTrikoData(direction: "RIGHT" | "LEFT", position: number) {
        const is1SD = position <= 20;
        const section: "1SD" | "2SD" = is1SD ? "1SD" : "2SD";
        const index = is1SD ? position - 1 : position - 21;
        const data = triko.triko[direction][section];

        return {
            op1: data.values.op1?.[index] || "N/A",
            op2: data.values.op2?.[index] || "N/A",
            op3: data.values.op3?.[index] || "N/A",
            spin1: data.SPIN?.["1SPIN"]?.[index]?.toFixed(2) || "N/A",
            spin2: data.SPIN?.["2SPIN"]?.[index]?.toFixed(2) || "N/A",
            spin3: data.SPIN?.["3SPIN"]?.[index]?.toFixed(2) || "N/A",
        };
    }

    function generarTabla() {
        const position = parseInt(numeroInput.value);
        const direction = direccionSelect.value;

        if (!position || position < 1 || position > 40 || !container) return;
        container.innerHTML = "";

        const { op1, op2, op3, spin1, spin2, spin3 } = getTrikoData(
            direction as "RIGHT" | "LEFT",
            position,
        );

        const tablaHTML = `
            <table  border="1" cellpadding="5" cellspacing="0" style="border-collapse: collapse; width: 100%;  background: linear-gradient(to bottom, #333, #111); 
        color: #FFD700; font-family: Arial, sans-serif; text-shadow: 1px 1px 2px black; border: 2px solid #FFD700;">
                <tr style="background: linear-gradient(to bottom, #555, #222); font-weight: bold; text-align: center; ">
                    <th style="border: 1px solid #FFD700; padding: 10px;">Opción</th>
                    <th style="border: 1px solid #FFD700; padding: 10px;">Angulo </th>
                    <th style="border: 1px solid #FFD700; padding: 10px;"> SPIN 1 </th>
                
                </tr>
                <tr style="text-align: center;" >
                    <td style="border: 1px solid #FFD700; padding: 8px;">Tiro 1</td>
                    <td style="border: 1px solid #FFD700; padding: 8px;">${op1}</td>
                    <td style="border: 1px solid #FFD700; padding: 8px;">${spin1}</td>
                    
                </tr>
                <tr style="text-align: center;" >
                    <td style="border: 1px solid #FFD700; padding: 8px;">Tiro 2</td>
                    <td style="border: 1px solid #FFD700; padding: 8px;">${op2}</td>
                    
                    <td style="border: 1px solid #FFD700; padding: 8px;">${spin2}</td>
                  
                </tr>
                <tr style="text-align: center;" >
                    <td style="border: 1px solid #FFD700; padding: 8px;">Tiro 3</td>
                    <td style="border: 1px solid #FFD700; padding: 8px;">${op3}</td>
                    
                    <td style="border: 1px solid #FFD700; padding: 8px;">${spin3}</td>
                </tr>
            </table>
        `;

        container.innerHTML = tablaHTML;
    }

    numeroInput.addEventListener("input", generarTabla);
    direccionSelect.addEventListener("change", generarTabla);
</script>

<style>
    .container {
        background: linear-gradient(135deg, var(--bg-color), #002040);
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        max-width: 90%;
        width: 50rem;
        border: 0.25rem solid var(--primary-color);
        position: relative;
        overflow: hidden;
    }

    .container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(
            to right,
            var(--primary-color),
            var(--secondary-color),
            var(--accent-color)
        );
    }

    h2 {
        color: var(--primary-color);
        text-align: center;
        font-size: 2.5em;
        margin-bottom: 1.5rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    input[type="number"] {
        margin: 0.625rem 0;
        padding: 0.625rem;
        width: 100%;
        background: linear-gradient(to bottom, #ffff99, var(--primary-color));
        color: #000;
        border: 0.1875rem solid var(--secondary-color);
        font-family: "Russo One", sans-serif;
        font-size: 1.2em;
        border-radius: 0.625rem;
        box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
    }

    input[type="number"]:focus {
        outline: none;
        box-shadow: 0 0 10px var(--accent-color);
    }
    .Direction {
        background: linear-gradient(to bottom, #444, #111);
        border: 2px solid #ffd700;
        color: #ffd700;
        font-weight: bold;
        font-family: Arial, sans-serif;
        text-shadow: 1px 1px 2px black;
        padding: 5px 10px;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(255, 215, 0, 0.7);
        cursor: pointer;
    }

    .table-container {
        overflow-x: auto;
        margin-top: 1.25rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 0.5rem;
        padding: 1rem;
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0.125rem;
    }

    th,
    td {
        border: 0.125rem solid var(--secondary-color);
        padding: 0.5rem;
        text-align: center;
        background-color: rgba(30, 144, 255, 0.7);
        border-radius: 0.3125rem;
    }

    th {
        background-color: var(--secondary-color);
        color: var(--primary-color);
        font-size: 1.2em;
    }

    tr:nth-child(even) td {
        background-color: rgba(255, 215, 0, 0.7);
    }
    .mobile-icon,
    .shot-icon {
        width: 30px;
        height: 30px;
        vertical-align: middle;
        margin-right: 5px;
    }

    input[type="radio"] {
        appearance: none;
        width: 1.25rem;
        height: 1.25rem;
        border: 0.125rem solid var(--primary-color);
        border-radius: 50%;
        outline: none;
        margin-right: 0.3125rem;
        vertical-align: middle;
        position: relative;
        cursor: pointer;
    }

    input[type="radio"]:checked::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 0.75rem;
        height: 0.75rem;
        background-color: var(--primary-color);
        border-radius: 50%;
        animation: pulse 0.5s ease-out;
    }

    input[type="radio"]:hover {
        box-shadow: 0 0 8px var(--accent-color);
    }

    label {
        cursor: pointer;
        font-size: 1.1em;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    @media (max-width: 768px) {
        .container {
            padding: 1rem;
        }

        h2 {
            font-size: 2em;
        }

        input[type="number"] {
            font-size: 1em;
        }

        th,
        td {
            padding: 0.5rem;
        }

        label {
            font-size: 1em;
        }

        .mobile-icon,
        .shot-icon {
            width: 20px;
            height: 20px;
        }
    }

    @media (max-width: 480px) {
        .container {
            padding: 0.75rem;
        }

        h2 {
            font-size: 1.75em;
        }

        input[type="radio"] {
            width: 1rem;
            height: 1rem;
        }

        .mobile-icon,
        .shot-icon {
            width: 15px;
            height: 15px;
        }
    }
</style>
