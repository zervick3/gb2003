---

---

<div class="container">
    <h2 class="float">GunBound 2004 - TurTle Calculador</h2>
    <input
        type="number"
        id="numeroInput"
        placeholder="Ingresa una posición (1-40)"
        min="1"
        max="40"
    />
    <div class="table-container" id="tablaContainer"></div>
</div>
<script>
    // Definición de interfaces y estructura de datos
    interface SectionData {
        columns: string[];
        data: {
            [key: string]: number[];
        };
    }
    interface TurtleData {
        [section: string]: SectionData;
    }
    const turtleData: { [key: string]: TurtleData } = {
        "turtle.jpeg": {
            "1SD": {
                columns: [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                ],
                data: {
                    default: [
                        0.6, 0.67, 1.07, 1.23, 1.38, 1.51, 1.63, 1.75, 1.85,
                        1.95, 2.05, 2.14, 2.29, 2.31, 2.39, 2.47, 2.54, 2.62,
                        2.69, 2.76,
                    ],
                    "70": [
                        0.67, 0.95, 1.16, 1.35, 1.5, 1.65, 1.79, 1.9, 2.02,
                        2.13, 2.23, 2.33, 2.43, 2.52, 2.61, 2.7, 2.78, 2.86,
                        2.94, 3.01,
                    ],
                    "75": [
                        0.76, 1.08, 1.32, 1.53, 1.71, 1.87, 2.02, 2.16, 2.29,
                        2.42, 2.53, 2.65, 2.75, 2.86, 2.96, 3.06, 3.15, 3.24,
                        3.33, 3.42,
                    ],
                    "80": [
                        0.92, 1.3, 1.6, 1.85, 2.06, 2.26, 2.44, 2.61, 2.77,
                        2.92, 3.06, 3.2, 3.33, 3.46, 3.58, 3.7, 3.81, 3.92, 4.3,
                    ],
                    Full: [
                        2.89, 2.89, 3.54, 3.34, 3.74, 3.55, 3.83, 3.67, 3.89,
                        3.75, 3.93, 3.81, 3.96, 3.85, 3.99, 3.89, 4.01, 3.92,
                        3.85, 3.95,
                    ],
                    angles: [
                        89, 88, 88, 88, 87, 86, 86, 85, 85, 84, 84, 83, 83, 82,
                        82, 81, 81, 80, 79, 79,
                    ],
                },
            },
            "2SD": {
                columns: [
                    "21",
                    "22",

                    "23",
                    "24",
                    "25",

                    "26",
                    "27",

                    "28",
                    "29",
                    "30",
                    "31",
                    "32",

                    "33",
                    "34",
                    "35",
                    "36",
                    "37",

                    "38",
                    "39",
                    "40",
                ],
                data: {
                    "65": [
                        2.83, 2.9, 2.96, 3.02, 3.09, 3.15, 3.21, 3.27, 3.33,
                        3.38, 3.44, 3.49, 3.55, 3.6, 3.65, 3.7, 3.76, 3.81,
                        3.86, 3.91,
                    ],
                    "70": [
                        3.09, 3.16, 3.23, 3.3, 3.37, 3.44, 3.5, 3.57, 3.63,
                        3.69, 3.75, 3.81, 3.87, 3.93, 3.99,
                    ],
                    "75": [3.5, 3.59, 3.67, 3.74, 3.82, 3.9, 3.97],
                    FULL: [
                        3.88, 3.98, 3.92, 4.0, 3.94, 4.0, 3.97, 3.93, 4.0, 3.96,
                        4.0, 3.99, 3.96, 4.0, 3.99, 3.96, 4.0, 4.0, 3.98, 3.97,
                    ],
                    "60": [
                        2.66, 2.72, 2.78, 2.84, 2.9, 2.96, 3.02, 3.07, 3.13,
                        3.18, 3.23, 3.34, 3.39, 3.44, 3.48, 3.53, 3.56, 3.58,
                        3.63, 3.68,
                    ],
                },
            },
        },
        "turtle2.jpeg": {
            "15D": {
                columns: [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                    "6",
                    "7",
                    "8",
                    "9",
                    "10",
                    "11",
                    "12",
                    "13",
                    "14",
                    "15",
                    "16",
                    "17",
                    "18",
                    "19",
                    "20",
                ],
                data: {
                    Time: [
                        1.8, 1.62, 1.83, 1.63, 1.85, 1.86, 1.88, 1.92, 1.91,
                        1.92, 1.95, 1.95, 2.02, 2.05, 2.07, 2.09, 2.13, 2.18,
                        2.23, 2.27,
                    ],
                    Fork: [
                        1.56, 1.57, 1.58, 1.58, 1.6, 1.65, 1.66, 1.69, 1.71,
                        1.73, 1.77, 1.82, 1.87, 1.92, 1.95, 1.98, 2.0, 2.1,
                        2.16, 2.23,
                    ],
                    Con: [
                        2.13, 2.13, 2.13, 2.13, 2.14, 2.15, 2.16, 2.17, 2.19,
                        2.21, 2.23, 2.26, 2.28, 2.29, 2.3, 2.33, 2.38, 2.39,
                        2.42, 2.44,
                    ],
                    Sky: [
                        3.65, 3.57, 3.6, 3.6, 3.7, 3.7, 3.7, 3.7, 3.8, 3.5, 3.7,
                        3.4, 3.8, 3.7, 3.7, 3.5, 3.8, 3.8, 3.8, 3.8,
                    ],
                },
            },
            "2SD": {
                columns: [
                    "21",
                    "22",
                    "18",
                    "23",
                    "24",
                    "25",
                    "26",
                    "27",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                    "30",
                ],
                data: {
                    Time: [
                        2.48, 2.53, 2.56, 2.59, 2.65, 2.71, 2.78, 2.83, 2.86,
                        2.89, 3.96, 3.02, 3.09, 3.15, 3.18, 3.22, 3.28, 3.35,
                        3.42, 3.49,
                    ],
                    Fork: [
                        2.51, 2.58, 2.62, 2.66, 2.73, 2.81, 2.89, 2.97, 3.01,
                        3.05, 3.13, 3.21, 3.29, 3.36, 3.4, 3.46, 3.54, 3.63,
                        3.7, 3.6,
                    ],
                    Con: [
                        2.57, 2.61, 2.63, 2.65, 2.69, 2.73, 2.78, 2.62, 2.84,
                        2.87, 2.91, 2.96, 3.01, 3.06, 3.09, 3.11, 3.16, 3.21,
                        3.26, 3.31,
                    ],
                },
            },
        },
    };

    function getPositionData(position: number): {
        section: string;
        index: number;
    } {
        if (position <= 20) return { section: "1SD", index: position - 1 };
        if (position <= 40) return { section: "2SD", index: position - 21 };
        throw new Error("Posición inválida");
    }

    const numeroInput = document.getElementById(
        "numeroInput",
    ) as HTMLInputElement;
    const container = document.getElementById(
        "tablaContainer",
    ) as HTMLDivElement;

    function generarTabla() {
        const position = parseInt(numeroInput.value);
        if (!position || position < 1 || position > 40 || !container) {
            container.innerHTML =
                "<div class='error'>Posición inválida (1-40)</div>";
            return;
        }

        const { section, index } = getPositionData(position);

        // Obtener datos de ambos archivos
        const data1 = turtleData["turtle.jpeg"][section]?.data;
        const data2 = turtleData["turtle2.jpeg"][section]?.data;

        // Combinar datos en un objeto
        const valores = {
            op1: data1?.default?.[index]?.toFixed(2) || "N/D",
            op2: data1?.["70"]?.[index]?.toFixed(2) || "N/D",
            op3: data1?.["75"]?.[index]?.toFixed(2) || "N/D",
            op4: data1?.["80"]?.[index]?.toFixed(2) || "N/D",
            spin: data1?.Full?.[index]?.toFixed(2) || "N/D",
            spinAngle: data1?.angles[index]?.toFixed(0) || "N/D",
            time: data2?.Time?.[index]?.toFixed(2) || "N/D",
            fork: data2?.Fork?.[index]?.toFixed(2) || "N/D",
            con: data2?.Con?.[index]?.toFixed(2) || "N/D",
            sky: data2?.Sky?.[index]?.toFixed(2) || "N/D",
        };

        container.innerHTML = `
            <table class="turtle-table">
                <thead>
                    <tr>
                        <th colspan="3" class="table-header">Posición ${position}</th>
                    </tr>
                    <tr>
                        <th>Tiros</th>
                        <th>Ángulo</th>
                        <th>Fuerza</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>Tiro 65%</td>
                        <td>65</td>
                        <td>${valores.op1}</td>
                    </tr>
                    <tr>
                        <td>Tiro 70%</td>
                        <td>70</td>
                        <td>${valores.op2}</td>
                    </tr>
                    <tr>
                        <td>Tiro 75%</td>
                        <td>75</td>
                        <td>${valores.op3}</td>
                    </tr>
                    <tr>
                        <td>Tiro 80%</td>
                        <td>80</td>
                        <td>${valores.op4}</td>
                    </tr>
                    <tr>
                        <td>Full Spin</td>
                        <td>${valores.spinAngle}</td>
                        <td>${valores.spin}</td>
                    </tr>
                    <tr>
                        <td>Tiempo</td>
                        <td>Time</td>
                        <td>${valores.time}</td>
                    </tr>
                    <tr>
                        <td>Bifurcación</td>
                        <td>Fork</td>
                        <td>${valores.fork}</td>
                    </tr>
                    <tr>
                        <td>Control</td>
                        <td>Con</td>
                        <td>${valores.con}</td>
                    </tr>
                    <tr>
                        <td>Cielo</td>
                        <td>Sky</td>
                        <td>${valores.sky}</td>
                    </tr>
                </tbody>
            </table>
        `;
    }

    // Estilos mejorados
    const style = document.createElement("style");
    style.textContent = `
        .turtle-table {
            width: 100%;
            border-collapse: collapse;
            background: #2c2c2c;
            color: #ffd700;
            border: 2px solid #4a4a4a;
            margin-top: 20px;
            font-family: 'Arial', sans-serif;
        }
        
        .table-header {
            background: #1a1a1a;
            font-size: 1.2em;
            padding: 15px;
            text-transform: uppercase;
        }
        
        th {
            background: #333;
            padding: 12px;
            border: 1px solid #4a4a4a;
        }
        
        td {
            padding: 10px;
            border: 1px solid #4a4a4a;
            text-align: center;
        }
        
        tr:nth-child(even) {
            background: #363636;
        }
        
        .error {
            color: #ff4444;
            padding: 10px;
            border: 1px solid #ff4444;
            margin-top: 20px;
            text-align: center;
        }
    `;
    document.head.appendChild(style);

    numeroInput.addEventListener("input", generarTabla);
    generarTabla(); // Generar tabla inicial
</script>

<style>
    .container {
        background: linear-gradient(135deg, var(--bg-color), #002040);
        padding: 2rem;
        border-radius: 1rem;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        max-width: 90%;
        width: 50rem;
        border: 0.25rem solid var(--primary-color);
        position: relative;
        overflow: hidden;
    }

    .container::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 5px;
        background: linear-gradient(
            to right,
            var(--primary-color),
            var(--secondary-color),
            var(--accent-color)
        );
    }

    h2 {
        color: var(--primary-color);
        text-align: center;
        font-size: 2.5em;
        margin-bottom: 1.5rem;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    input[type="number"] {
        margin: 0.625rem 0;
        padding: 0.625rem;
        width: 100%;
        background: linear-gradient(to bottom, #ffff99, var(--primary-color));
        color: #000;
        border: 0.1875rem solid var(--secondary-color);
        font-family: "Russo One", sans-serif;
        font-size: 1.2em;
        border-radius: 0.625rem;
        box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
    }

    input[type="number"]:focus {
        outline: none;
        box-shadow: 0 0 10px var(--accent-color);
    }
    .Direction {
        background: linear-gradient(to bottom, #444, #111);
        border: 2px solid #ffd700;
        color: #ffd700;
        font-weight: bold;
        font-family: Arial, sans-serif;
        text-shadow: 1px 1px 2px black;
        padding: 5px 10px;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(255, 215, 0, 0.7);
        cursor: pointer;
    }

    .table-container {
        overflow-x: auto;
        margin-top: 1.25rem;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 0.5rem;
        padding: 1rem;
    }

    table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0.125rem;
    }

    th,
    td {
        border: 0.125rem solid var(--secondary-color);
        padding: 0.5rem;
        text-align: center;
        background-color: rgba(30, 144, 255, 0.7);
        border-radius: 0.3125rem;
    }

    th {
        background-color: var(--secondary-color);
        color: var(--primary-color);
        font-size: 1.2em;
    }

    tr:nth-child(even) td {
        background-color: rgba(255, 215, 0, 0.7);
    }
    .mobile-icon,
    .shot-icon {
        width: 30px;
        height: 30px;
        vertical-align: middle;
        margin-right: 5px;
    }

    input[type="radio"] {
        appearance: none;
        width: 1.25rem;
        height: 1.25rem;
        border: 0.125rem solid var(--primary-color);
        border-radius: 50%;
        outline: none;
        margin-right: 0.3125rem;
        vertical-align: middle;
        position: relative;
        cursor: pointer;
    }

    input[type="radio"]:checked::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 0.75rem;
        height: 0.75rem;
        background-color: var(--primary-color);
        border-radius: 50%;
        animation: pulse 0.5s ease-out;
    }

    input[type="radio"]:hover {
        box-shadow: 0 0 8px var(--accent-color);
    }

    label {
        cursor: pointer;
        font-size: 1.1em;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }

    @media (max-width: 768px) {
        .container {
            padding: 1rem;
        }

        h2 {
            font-size: 2em;
        }

        input[type="number"] {
            font-size: 1em;
        }

        th,
        td {
            padding: 0.5rem;
        }

        label {
            font-size: 1em;
        }

        .mobile-icon,
        .shot-icon {
            width: 20px;
            height: 20px;
        }
    }

    @media (max-width: 480px) {
        .container {
            padding: 0.75rem;
        }

        h2 {
            font-size: 1.75em;
        }

        input[type="radio"] {
            width: 1rem;
            height: 1rem;
        }

        .mobile-icon,
        .shot-icon {
            width: 15px;
            height: 15px;
        }
    }
</style>
