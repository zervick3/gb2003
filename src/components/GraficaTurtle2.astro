---

---

<!-- Controles -->
<div class="container">
    <h1>Gunbound - Grafica Angulo</h1>
    <div class="controls">
        <div>
            <div class="input-container">
                <h3>Selecciona valores</h3>
                <input
                    type="number"
                    id="distance"
                    placeholder="Distancia (m)"
                />
                <select id="selectValue">
                    <option value="65">65°</option>
                    <option value="70">70°</option>
                    <option value="75">75°</option>
                    <option value="80">80°</option>
                </select>
            </div>
            <!-- angulo para los angulos -->
            <label for="dataSelect">Selecciona un conjunto de datos: </label>
            <select id="dataSelect"></select>
        </div>
        <div>
            <label for="windInput">Valor del viento: </label>

            <input
                type="number"
                id="windInput"
                placeholder="Ingresa el valor del viento"
            />
        </div>
    </div>
    <!-- Div para mostrar los resultados -->
    <div class="value-display">
        <h2>POWER</h2>
        <h2 id="finalResult">--</h2>
        <h2 id="result">VIENTO A FAVOR:</h2>
        <h2 id="result2">VIENTO ENCONTRA:</h2>
    </div>

    <!-- Canvas donde se dibuja la gráfica -->
    <canvas id="dataCanvas" width="320" height="320"></canvas>
    <canvas id="chartCanvas" width="350" height="350"></canvas>

    <!-- Div para mostrar mensajes -->
    <div id="info">Haz clic en un punto para ver su valor</div>
</div>

<script>
    // Definición de interfaces para los puntos en los gráficos
    interface ChartPoint {
        x: number;
        y: number;
        value: number;
    }

    // Definición de tipos para los conjuntos de datos
    type AngleValues = { [key: string]: number };
    type DatasetType = { [key: string]: number[] };

    // Inicialización de elementos del DOM
    const canvas = document.getElementById("chartCanvas") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d")!;
    const centerX = canvas.width / 2;
    const centerY = canvas.height / 2;
    const radius = 140;
    const values: number[] = [
        0.02, 0.02, 0.02, 0.02, 0.02, 0.015, 0.01, 0.01, 0.005, 0, 0.003, 0.006,
        0.009, 0.014, 0.018, 0.018, 0.02, 0.02, 0.02, 0.02, 0.02, 0.015, 0.01,
        0.01, 0.005, 0, 0.003, 0.006, 0.009, 0.14, 0.18, 0.18,
    ];
    const angleStep = (2 * Math.PI) / values.length;
    let selectedPoint: ChartPoint | null = null;
    const points: ChartPoint[] = [];

    // Valores predefinidos
    const valuesJSON: { [key: string]: AngleValues } = {
        "65": {
            "1": 0.6,
            "2": 0.67,
            "3": 1.07,
            "4": 1.23,
            "5": 1.38,
            "6": 1.51,
            "7": 1.63,
            "8": 1.75,
            "9": 1.85,
            "10": 1.95,
            "11": 2.05,
            "12": 2.14,
            "13": 2.29,
            "14": 2.31,
            "15": 2.39,
            "16": 2.47,
            "17": 2.54,
            "18": 2.62,
            "19": 2.69,
            "20": 2.76,
        },
        "70": {
            "1": 0.65,
            "2": 0.95,
            "3": 1.16,
            "4": 1.35,
            "5": 1.5,
            "6": 1.65,
            "7": 1.79,
            "8": 1.9,
            "9": 2.02,
            "10": 2.13,
            "11": 2.23,
            "12": 2.33,
            "13": 2.43,
            "14": 2.52,
            "15": 2.61,
            "16": 2.7,
            "17": 2.78,
            "18": 2.86,
            "19": 2.94,
            "20": 3.0,
        },
        "75": {
            "1": 0.76,
            "2": 1.08,
            "3": 1.32,
            "4": 1.53,
            "5": 1.71,
            "6": 1.87,
            "7": 2.02,
            "8": 2.16,
            "9": 2.29,
            "10": 2.42,
            "11": 2.53,
            "12": 2.65,
            "13": 2.75,
            "14": 2.86,
            "15": 2.96,
            "16": 3.06,
            "17": 3.15,
            "18": 3.24,
            "19": 3.33,
            "20": 3.42,
        },
        "80": {
            "1": 0.92,
            "2": 1.33,
            "3": 1.06,
            "4": 1.85,
            "5": 2.06,
            "6": 2.26,
            "7": 2.44,
            "8": 2.61,
            "9": 2.77,
            "10": 2.92,
            "11": 3.06,
            "12": 3.2,
            "13": 3.33,
            "14": 3.46,
            "15": 3.58,
            "16": 3.7,
            "17": 3.81,
            "18": 3.92,
            "19": 4.03,
            "20": 4.4,
        },
    };

    // Elementos de UI
    const finalResult = document.getElementById("finalResult") as HTMLElement;
    const windSpeedInput = document.getElementById(
        "windInput",
    ) as HTMLInputElement;
    const resultElement = document.getElementById("result")!;
    const result2Element = document.getElementById("result2")!;

    // Función para actualizar valores
    function updateValue(): void {
        const angle = (
            document.getElementById("selectValue") as HTMLSelectElement
        ).value;
        const distance = (
            document.getElementById("distance") as HTMLInputElement
        ).value;
        const powerValue = valuesJSON[angle]?.[distance] || 0;
        finalResult.textContent = powerValue.toFixed(2);
    }

    // Dibujar gráfico principal
    function drawChart(): void {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.strokeStyle = "#FFD700";
        ctx.lineWidth = 2;
        points.length = 0;

        values.forEach((value, i) => {
            const angle = i * angleStep - Math.PI / 2;
            const x = centerX + (radius + 10) * Math.cos(angle);
            const y = centerY + (radius + 10) * Math.sin(angle);
            points.push({ x, y, value });

            ctx.fillStyle = "#FFD700";
            ctx.font = "bold 12px Arial";
            ctx.fillText(value.toFixed(3), x - 5, y - 10);

            ctx.fillStyle =
                selectedPoint?.x === x && selectedPoint?.y === y
                    ? "#FF4500"
                    : "#00FFFF";
            ctx.beginPath();
            ctx.arc(x, y, 7, 0, 2 * Math.PI);
            ctx.fill();
        });
    }

    // Evento click en el primer gráfico
    canvas.addEventListener("click", (event: MouseEvent) => {
        const rect = canvas.getBoundingClientRect();
        const mouseX = event.clientX - rect.left;
        const mouseY = event.clientY - rect.top;
        const windInput = parseFloat(windSpeedInput.value) || 0;

        // Obtener el valor base actualizado
        const angle = (
            document.getElementById("selectValue") as HTMLSelectElement
        ).value;
        const distance = (
            document.getElementById("distance") as HTMLInputElement
        ).value;
        const basePower = valuesJSON[angle]?.[distance] || 0;

        points.forEach((point) => {
            const dx = mouseX - point.x;
            const dy = mouseY - point.y;
            if (Math.sqrt(dx * dx + dy * dy) < 8) {
                selectedPoint = point;
                // Calcular desde el valor base cada vez
                finalResult.textContent = (
                    basePower +
                    windInput * point.value
                ).toFixed(2);
                drawChart();
            }
        });
    });

    // Configuración del segundo gráfico
    const datasets: DatasetType = {
        65: [
            0.7, 0.5, 0.2, 0.2, 0.5, 0.9, 0.9, 0.9, 0.9, 0.65, 0.03, 0.01, 0.04,
            0.06, 0.08, 0.085,
        ],
        70: [
            0.6, 0.5, 0.25, 0.05, 0.25, 0.5, 0.6, 0.65, 0.65, 0.5, 0.35, 0.1,
            0.2, 0.45, 0.65, 0.7,
        ],
        75: [
            0.85, 0.65, 0.45, 0.25, 0.55, 0.35, 0.95, 0.8, 0.78, 0.5, 0.33,
            0.14, 0.35, 0.6, 0.85, 0.9,
        ],
        80: [
            0.57, 0.45, 0.3, 0.1, 0.1, 0.3, 0.46, 0.54, 0.58, 0.54, 0.4, 0.19,
            0.1, 0.35, 0.53, 0.6,
        ],
    };

    const dataCanvas = document.getElementById(
        "dataCanvas",
    ) as HTMLCanvasElement;
    const dataCtx = dataCanvas.getContext("2d")!;
    const dataCenterX = dataCanvas.width / 2;
    const dataCenterY = dataCanvas.height / 2;
    const maxRadius = 150;
    let selectedDataset: string = "65";
    let dataPoints: ChartPoint[] = [];
    let selectedPointValue: number | null = null;

    // Dibujar segundo gráfico
    function drawCircleWithPoints(): void {
        dataCtx.clearRect(0, 0, dataCanvas.width, dataCanvas.height);
        dataPoints = [];
        const data = datasets[selectedDataset];
        const colors = [
            "black",
            "black",
            "black",
            "black",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "red",
            "black",
            "black",
            "black",
            "black",
        ];

        dataCtx.beginPath();
        dataCtx.arc(dataCenterX, dataCenterY, maxRadius, 0, 2 * Math.PI);
        dataCtx.strokeStyle = "#000";
        dataCtx.stroke();

        data.forEach((value, i) => {
            const angle = i * ((2 * Math.PI) / data.length);
            const x = dataCenterX + maxRadius * Math.cos(angle);
            const y = dataCenterY + maxRadius * Math.sin(angle);
            dataPoints.push({ x, y, value });

            dataCtx.beginPath();
            dataCtx.arc(x, y, 5, 0, 2 * Math.PI);
            dataCtx.fillStyle = colors[i % colors.length];
            dataCtx.fill();

            dataCtx.fillStyle = "blue";
            dataCtx.fillText(value.toFixed(2), x + 10, y);
        });
    }

    // Calcular resultados finales
    function calculateWindResults(): void {
        const windInput = document.getElementById(
            "windInput",
        ) as HTMLInputElement;
        const windValue = parseFloat(windInput.value) || 0;

        if (selectedPointValue !== null) {
            const angleValue = parseFloat(selectedDataset);
            const windEffect = windValue * selectedPointValue;

            resultElement.textContent = `VIENTO A FAVOR: ${(angleValue + windEffect).toFixed(2)}`;
            result2Element.textContent = `VIENTO EN CONTRA: ${(angleValue - windEffect).toFixed(2)}`;
        }
    }

    // Event listeners
    dataCanvas.addEventListener("click", (event: MouseEvent) => {
        const rect = dataCanvas.getBoundingClientRect();
        const clickX = event.clientX - rect.left;
        const clickY = event.clientY - rect.top;

        dataPoints.forEach((point) => {
            const dist = Math.hypot(point.x - clickX, point.y - clickY);
            if (dist <= 10) {
                selectedPointValue = point.value;
                document.getElementById("info")!.textContent =
                    `Valor seleccionado: ${selectedPointValue}`;
                calculateWindResults();
            }
        });
    });

    // Inicialización
    // 1. Obtenemos el elemento con el tipo correcto
    const dataSelect = document.getElementById(
        "dataSelect",
    ) as HTMLSelectElement;

    // 2. Poblamos las opciones del select
    dataSelect.innerHTML = Object.keys(datasets)
        .map((angle) => `<option value="${angle}">Ángulo ${angle}°</option>`)
        .join("");

    // 3. Agregamos el event listener con tipado correcto
    dataSelect.addEventListener("change", function (this: HTMLSelectElement) {
        selectedDataset = this.value; // Ahora funciona correctamente
        drawCircleWithPoints();
    });
    document
        .getElementById("windInput")!
        .addEventListener("input", calculateWindResults);
    document
        .getElementById("selectValue")!
        .addEventListener("change", updateValue);
    document.getElementById("distance")!.addEventListener("input", updateValue);

    // Inicializar gráficos
    drawChart();
    drawCircleWithPoints();
    updateValue();
</script>

<style>
    .container {
        max-width: 800px;
        background: #004080;
        padding: 40px;
        margin: 0 auto 30px;
        border: 3px solid #ffcc00;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.8);
    }

    h1 {
        text-align: center;
        color: #ffcc00;
        font-size: 2em;
    }
    h2 {
        text-align: center;
        color: #ffcc00;
    }
    strong {
        text-align: center;
        color: #ffcc00;
        font-size: 1.2em;
    }
    .Direction {
        background: linear-gradient(to bottom, #444, #111);
        border: 2px solid #ffd700;
        color: #ffd700;
        font-weight: bold;
        font-family: Arial, sans-serif;
        text-shadow: 1px 1px 2px black;
        padding: 5px 10px;
        border-radius: 5px;
        box-shadow: 0 0 5px rgba(255, 215, 0, 0.7);
        cursor: pointer;
    }
    input[type="number"] {
        margin: 0.625rem 0;
        padding: 0.625rem;
        width: 100%;
        background: linear-gradient(to bottom, #ffff99, var(--primary-color));
        color: #000;
        border: 0.1875rem solid var(--secondary-color);
        font-family: "Russo One", sans-serif;
        font-size: 1.2em;
        border-radius: 0.625rem;
        box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.2);
    }
    .custom-box {
        background-color: black;
        color: #fcd116;
        padding: 10px;
        border: 2px solid #fcd116;
        font-size: 1.4em;
    }
    input[type="number"]:focus {
        outline: none;
        box-shadow: 0 0 10px var(--accent-color);
    }
    input[type="radio"] {
        appearance: none;
        width: 1.25rem;
        height: 1.25rem;
        border: 0.125rem solid var(--primary-color);
        border-radius: 50%;
        outline: none;
        margin-right: 0.3125rem;
        vertical-align: middle;
        position: relative;
        cursor: pointer;
    }

    input[type="radio"]:checked::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 0.75rem;
        height: 0.75rem;
        background-color: var(--primary-color);
        border-radius: 50%;
        animation: pulse 0.5s ease-out;
    }

    input[type="radio"]:hover {
        box-shadow: 0 0 8px var(--accent-color);
    }

    label {
        cursor: pointer;
        font-size: 1.1em;
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    }
    option {
        background: #444;
        color: #ffd700;
        font-weight: bold;
        font-family: Arial, sans-serif;
        text-shadow: 1px 1px 2px black;
    }
    .form-section,
    .graphic-section {
        flex: 1;
        padding: 10px;
    }

    .wrapper {
        display: flex;
        flex-wrap: wrap;
    }

    label,
    div,
    p {
        margin-top: 15px;
        display: block;
        font-size: 1.085em;
        font-weight: bold;
        color: #ffcc00;
    }

    input[type="number"],
    select {
        width: 100%;
        padding: 5px;
        margin-top: 5px;
        box-sizing: border-box;
        border: 2px solid #ffcc00;
        border-radius: 5px;
        background: #333;
        color: #ffcc00;
        font-size: 1em;
    }

    /* Estilos para el canvas, se ajusta el tamaño para el layout */
    #canvas {
        background: #222;
        border: 2px solid #ffcc00;
        cursor: pointer;
        max-width: 100%;
        height: auto;
    }

    .result {
        margin-top: 20px;
        text-align: center;
        font-weight: bold;
        font-size: 1.2em;
        color: #ffcc00;
    }

    button {
        width: 100%;
        padding: 10px;
        background: #ffcc00;
        color: #333;
        border: 2px solid #333;
        border-radius: 5px;
        margin-top: 20px;
        font-size: 1em;

        cursor: pointer;
        transition:
            background 0.3s,
            color 0.3s;
    }

    button:hover {
        background: #fff;
        color: #000;
    }

    /* Ajustar el layout en pantallas más grandes */
    @media (min-width: 700px) {
        .wrapper {
            flex-wrap: nowrap;
        }
        .form-section,
        .graphic-section {
            flex: 1;
        }
        .graphic-section {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
    }
</style>
